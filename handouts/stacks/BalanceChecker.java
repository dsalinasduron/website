/** * BalanceChecker.java * * A balance checking algorithm that determines if a parenthesized expression is balanced. */public class BalanceChecker{   /** Decides whether the parentheses, brackets, and braces       in a string occur in left/right pairs.       @param expression a string to be checked       @return true if the delimiters are paired correctly */   public static boolean checkBalance(String expression)   {	   	   Stack<Character> openDelimiterStack = new ArrayStack<Character>();	         int characterCount = expression.length();      boolean isBalanced = true;      int index = 0;      char nextCharacter = ' ';            for (; isBalanced && (index < characterCount); index++)      {         nextCharacter = expression.charAt(index);         switch (nextCharacter)         {			// we push opening delimiters            case '(': case '[': case '{':               openDelimiterStack.push(nextCharacter);               break;		    // we pop closing delimiters            case ')': case ']': case '}':               if (openDelimiterStack.isEmpty())                  isBalanced = false;               else               {                  char openDelimiter = openDelimiterStack.pop();                  isBalanced = isPaired(openDelimiter, nextCharacter);               }                break;            default: break;         }       }             if (!openDelimiterStack.isEmpty())         isBalanced = false;      return isBalanced;   }          /**	* Returns true if the given characters, open and close, form a pair    * of parentheses, brackets, or braces.	*/   private static boolean isPaired(char open, char close)   {      return (open == '(' && close == ')') ||             (open == '[' && close == ']') ||             (open == '{' && close == '}');   } } 